cmake_minimum_required(VERSION 2.8)
project(bsplines)

option(BSPLINE_BUILD_QT "Build the Qt application" OFF)
option(BSPLINE_BUILD_UNIT_TESTS "Build test using Boost.Test" OFF)

include_directories(d:/mingw_libs) # Temp. HACK: TODO: FIX

add_definitions(-std=c++11)
add_executable(bspline_demo bspline.hpp demo.cpp)


if (BSPLINE_BUILD_UNIT_TESTS)
    # Handle Boost
    find_package(Boost 1.45 COMPONENTS unit_test_framework REQUIRED)
    include_directories(${Boost_INCLUDE_DIRS})
    add_executable(tests tests.cpp)
    target_link_libraries(tests ${Boost_LIBRARIES})
endif()

if (BSPLINE_BUILD_QT)
    # Handle OpenGL and GLU.
    find_package(OpenGL REQUIRED)
    include_directories(${OPENGL_INCLUDE_DIR})
    if (NOT ${OPENGL_GLU_FOUND})
        message(ERROR "GLU not found!")
    endif()

    # Handle Qt
    set(QT_USE_QTOPENGL TRUE)
    find_package(Qt4 REQUIRED)
    set(qtapp_SOURCES qtapp.cpp)
    set(qtapp_HEADERS qtapp.hpp)
    # The header files generated by uic are needed as we need to build
    # a dependency between them and the final executable. Otherwise they will not
    # be created.
    # To invoke moc. Assigns names of the resulting files to the variable listed first.
    qt4_wrap_cpp(qtapp_HEADERS_MOC ${qtapp_HEADERS})
    include(${QT_USE_FILE})
    
    if (WIN32)
        set(QWT_INCLUDE_DIRS "$ENV{QWT_ROOT}/include")
        if(CMAKE_BUILD_TYPE STREQUAL "Release")
            set(QWT_LIBRARIES "$ENV{QWT_ROOT}/lib/qwt.dll")
            message(STATUS "Using release version of Qwt.")
        else()
            set(QWT_LIBRARIES "$ENV{QWT_ROOT}/lib/qwtd.dll")
            message(STATUS "Using debug version of Qwt.")
        endif()
    elseif (UNIX)
        find_package(Qwt REQUIRED)
        if (NOT ${QWT_FOUND})
            message(ERROR "Qwt library not found!")
        endif()
    endif()
    include_directories(${QWT_INCLUDE_DIRS})
        
    # Make main executable
    add_executable(qtdemo bspline.hpp ${qtapp_SOURCES} ${qtapp_HEADERS_MOC})

    target_link_libraries(qtdemo ${QT_LIBRARIES})    
    target_link_libraries(qtdemo ${QWT_LIBRARIES})
    target_link_libraries(qtdemo ${OPENGL_LIBRARIES})
    
endif()
